// Lab12_1 class inheritance & Polymorphism
#include <iostream>
#include <string>
using namespace std;


class Base {
protected: //Base type
	void print_base() { cout << "Base" << endl; }
};

// Base type  |  상속 type   | Derived type
// private    |  상관없음    | 접근 불가( Base함수로 접근)
// protected  |  상관없음    | private
// public     | private/protected | private
// public     | public       | public

class Derived : private Base {
public:
	void print_derived() {
		Base::print_base(); 
		cout << "Derived" << endl;
	}
};

int main() {
	Base base;
	Derived derived;

	derived.print_derived();

	return 0;
}

//Lab_12_2 
// Polymorphism의 기본적인 이해를 하였는가? 

#include <iostream>
#include <string>
using namespace std;



// 함수 오버로딩: int    sum(int x, int y), 
//                double sum(double x, double y)
//                float  sum(float x, float y, float z)
// 함수 오버라이딩 (상속의 특수한 경우 사용)
//void Text::append(string _extra)
//void Fancy::append(string _extra)

class Text {
private:
	string text;
public:
	Text(string _t) : text(_t) {}
	virtual string get() {//get()함수 virtual 로 구현
		return this->text; 
	}
	virtual void append(string _extra) { text += _extra; }
};

class FancyText : public Text {
private:
	// string text;b접근이 안됨, Base Class에서 private
	string left_brac;
	string right_brac;
	string connector;
public:
	// initialization list는 생성자를 호출할 수 있게 해준다.
	FancyText(string _t, string _lb, string _rb, string _con) :
		Text::Text(_t), left_brac(_lb), right_brac(_rb), connector(_con) {}
	string get() override { //override 키워드 사용한 get()함수 구현, main함수 참고하여 출력화면처럼 되도록 구현
		return left_brac + Text::get() + right_brac; 
	}
	void append(string _extra) override { //override 키워드 사용한 append()함수 구현
		Text::append(_extra + connector); 
	}
};

class FixedText : public Text {
public:
	FixedText() : Text::Text("FIXED") {}
	void append(string _extra) override {}//override 키워드 사용한 append()함수 구현, main함수 참고하여 출력화면처럼 되도록 구현
};

int main() {
	Text t1("Plain");
	t1.append("A");
	cout << t1.get() << endl;

	FancyText t2("Fancy", "<<", ">>", "***");
	t2.append("A");
	cout << t2.get() << endl;

	FixedText t3;
	t3.append("A");
	cout << t3.get() << endl;
	t1 = t2; // Base <- Derived 가능
	//t2 = t1; // Derived <- Base 불가능

	return 0;
}

//Lab_12_3 12_2 문제를 클래스 별로 cpp, hpp로 나누는 것 

**Text.h**

#ifndef Text_h
#define Text_h
#include <string>
using namespace std;

class Text {
private:
	string text;
public:
	Text(string _t);
	virtual string get();
	virtual void append(string _extra);
};
#endif

**Text.cpp**

#include "Text.h"

Text::Text(string _t) : text(_t) {};
string Text::get() { //get()함수 virtual 로 구현 
	return this->text;
}
void Text::append(string _extra) { text += _extra; }


**FancyText.h**
#ifndef FanyText_h
#define FancyText_h
#include "Text.h"


class FancyText : public Text {
private:
	// string text;b접근이 안됨, Base Class에서 private
	string left_brac;
	string right_brac;
	string connector;
public:
	// initialization list는 생성자를 호출할 수 있게 해준다.
	FancyText(string _t, string _lb, string _rb, string _con);
	string get() override;
	void append(string _extra);
};
#endif

**FancyText.cpp**

#include "FacnyText.h"

FancyText::FancyText(string _t, string _lb, string _rb, string _con) :
	Text::Text(_t), left_brac(_lb), right_brac(_rb), connector(_con) {}
string FancyText::get() { //override 키워드 사용한 get()함수 구현, main함수 참고하여 출력화면처럼 되도록 구현
	return left_brac + Text::get() + right_brac;
}
void FancyText::append(string _extra) {  //override 키워드 사용한 append()함수 구현
	Text::append(this->connector + _extra); // append라는 부모 클래스의 함수를 override? 
}

**FixedText.h**

#ifndef FixedText_h
#define FixedText_h
#include "Text.h"

class FixedText : public Text {
public:
	FixedText();
	void append(string _extra) override ;//override 키워드 사용한 append()함수 구현, main함수 참고하여 출력화면처럼 되도록 구현
};
#endif

**FixedText.cpp**

#include "FIxedText.h"

FixedText::FixedText() : Text::Text("FIXED") {}
void FixedText::append(string _extra) {};//override 키워드 사용한 append()함수 구현, main함수 참고하여 출력화면처럼 되도록 구현

****main.cpp****

#include <iostream>
#include <string>
using namespace std;
#include "Text.h"
#include "FacnyText.h"
#include "FixedText.h"

// 함수 오버로딩: int    sum(int x, int y), 
//                double sum(double x, double y)
//                float  sum(float x, float y, float z)
// 함수 오버라이딩 (상속의 특수한 경우 사용)
//void Text::append(string _extra)
//void Fancy::append(string _extra)


int main() {
	Text t1("Plain");
	t1.append("A");
	cout << t1.get() << endl;

	FancyText t2("Fancy", "<<", ">>", "***");
	t2.append("A");
	cout << t2.get() << endl;

	FixedText t3;
	t3.append("A");
	cout << t3.get() << endl;
	t1 = t2; // Base <- Derived 가능
	//t2 = t1; // Derived <- Base 불가능

	return 0;
}

를 통해서 성공적으로 구현할 수 있었음. 
#ifndef 
#define 

#endif 중복 참조를 막아주는 구문이라고 그랬던 것 같고 

추가적으로 참조하는 파일에서의 모든 라이브러리를 불러오게 되므로 추가 참조를 하지 않아도 됨. 
이 문제의 경우는 기존의 파일을 cpp, hpp 파일로 나눌 수 있는지에 대한 문제로 되게 중요할 거 같음. 내가 지금 하고 있는 분야에서도 모듈로써 파일을 분리시켜줘야 하는데 이때 발생하는 문제가 main함수에서 파일을 분리하는 것이라고 생각함. 

//Lab_12 응용문제1 
#include <iostream>
using namespace std;

class Polygon {
public:
	Polygon() {}
	Polygon(int point, float length) {
		mPoint = point; 
		mLength = length; 
	}
	~Polygon() {}
	virtual void calcPerimeter() { 
		cout << "Perimeter: empty" << endl; 
	}
	virtual void calcArea() {
		cout << "Area: empty" << endl; 
	}
protected: // 상속 받는 경우만 
	int mPoint; // 꼭지점의 갯수
	double mLength; // 한 변의 길이
};

class Rectangle : public Polygon {
public:
	Rectangle() {}
	Rectangle(int point, float length) : Polygon(point, length) {}
	~Rectangle() {}
	void calcPerimeter() override {
		cout << "Perimeter: " << mPoint * mLength << endl; 
	}
	void calcArea() override {
		cout << "Area: " << mLength * mLength << endl; 
	}
};

int main() {
	Polygon pol;
	Rectangle rec(4, 10);

	cout << "--- Polygon class ---" << endl;
	pol.calcPerimeter();
	pol.calcArea();
	cout << "--- Rectangle class ---" << endl;
	rec.calcPerimeter();
	rec.calcArea();

	return 0;
}

// Lab12_2 응용 문제2 
#include <iostream>
#include <cmath>
using namespace std;

class Polygon {
public:
	Polygon() {}
	Polygon(int point, float length) {
		mPoint = point; 
		mLength = length; 
	}
	~Polygon() {}
	virtual void calcPerimeter() { 
		cout << "Perimeter: empty" << endl; 
	}
	virtual void calcArea() {
		cout << "Area: empty" << endl; 
	}
protected: // 상속 받는 경우만 
	int mPoint; // 꼭지점의 갯수
	double mLength; // 한 변의 길이
};

class Rectangle : public Polygon {
public:
	Rectangle() {}
	Rectangle(int point, float length) : Polygon(point, length) {}
	~Rectangle() {}
	void calcPerimeter() override {
		cout << "Perimeter: " << mPoint * mLength << endl; 
	}
	void calcArea() override {
		cout << "Area: " << mLength * mLength << endl; 
	}
};
class Triangle : public Polygon {
public:
	Triangle() {}
	Triangle(int point, float length) : Polygon(point, length) {}
	~Triangle() {} 
	void calcPerimeter() override {
		cout << "Perimeter: " << mPoint * mLength << endl;
	}
	void calcArea() override {
		cout << "Area: " << sqrt(3) / 4 * pow(mLength, 2) << endl; 
	}
};
class Circle : public Polygon {
public:
	Circle() {}
	Circle(int point, float length) : Polygon(point, length) {}
	~Circle() {} 
	void calcPerimeter() override {
		cout << "Perimeter: " << 3.14 * 2 * mLength << endl; 
	}
	void calcArea() override {
		cout << "Area: " << 3.14 * pow(mLength , 2) << endl; 
	}
};

int main() {
	Triangle tri(3, 10);
	Rectangle rec(4, 10);
	Circle cir(0, 5);
	cout << "--- Triangle class ---" << endl;
	tri.calcPerimeter();
	tri.calcArea();
	cout << "--- Rectangle class ---" << endl;
	rec.calcPerimeter();
	rec.calcArea();
	cout << "--- Circle class ---" << endl;
	cir.calcPerimeter();
	cir.calcArea();

	return 0;
}

// Lab_12 응용문제 3 
// 처음 짤 때보다 훨씬 깔끔 해짐. 

#include <iostream>
using namespace std;

class Train {
public:
	Train() {}
	Train(int people) { mPeople = people; }
	~Train() {}
	virtual int station(int takeOff, int takeOn) { 
		mPeople = mPeople + takeOn - takeOff; 
		return mPeople; 
	}
protected:
	int mPeople; // 사람 수
};
class Ktx : public Train {
public:
	Ktx() : Train(0) {}
	Ktx(int people) : Train(people) {}
	~Ktx() {}
	// 기차에 사람이 타고 내리는 함수
	int station(int takeOff, int takeOn) { 
		Train::station(takeOff, takeOn);
		return mPeople; 
	}
	int getPeople() {  
		return mPeople; 
	}
};

int main()
{
	Ktx k;
	int take_on, take_off, max_on_train(0); 
	for (int i = 1; i <= 5; i++) {
		cout << i << "번역: ";
		cin >> take_off >> take_on; 
		int total_on_train = k.station(take_off, take_on);  // count people in train specific station 
		if (total_on_train < 0) { // case of virtual takeoff occur!!
			cout << "정원미달입니다" << endl;
			break; 
		}
		else if (total_on_train > 300) { // case of Too many people who are taking on train
			cout << "정원초과입니다" << endl;
			break; 
		}
		max_on_train = max(max_on_train, total_on_train); // purpose of this program -> return max People on train range of 1~5 station 

		if(i == 5) cout << "가장 많은 사람이 탑승 했을 때의 사람 수: " << max_on_train << endl;
	}
	return 0;
}

// Lab_12_4 응용문제 -> 먼가 더 깔끔하게 만들 수 있을 거 같은데....흠...

#include <iostream>
#include <string>
using namespace std;

class Avengers {
public:
	Avengers() {
		name = "";
		attack_point = 0;
		defense_point = 0;
		health = 0;
	}
	~Avengers() {}
	// 캐릭터 설정 함수
	virtual void set(string _name, int _attack, int _defense, int _health) {}
	// 공격 함수
	virtual int attack() { return 0; }
	// 방어 함수
	virtual void defense(int _attack_point) { }
	// 캐릭터 정보 출력 함수
	virtual void print_info() { }
protected:
	string name;		// 캐릭터 이름
	int attack_point;	// 공격력
	int defense_point;	// 방어력
	int health;		// 체력
};

class Character : public Avengers {
public:
	void set(string _name, int _attack, int _defense, int _health) override{
		this->name = _name; 
		this->attack_point = _attack; 
		this->defense_point = _defense; 
		this->health = _health; 
	}
	void setHealth(int health = 0 ) { // Using when game over
		this->health = health; 
	}
	int attack() override {
		return this->attack_point;
	}
	void defense(int _attack_point) override {
		this->health = this->health - _attack_point + this->defense_point; 
	}
	void print_info() override {
		cout << "Name: " << this->name << endl; 
		cout << "Attack_Point: " << this->attack_point << endl; 
		cout << "Defense_Point: " << this->defense_point << endl; 
		cout << "Health: " << this->health << endl;
	}
	Character& operator=(const Character& CH) {
		this->name = CH.name; 
		this->attack_point = CH.attack_point;
		this->defense_point = CH.defense_point;
		this->health = CH.health; 
		return *this; 
	}
	string getName() {
		return this->name; 
	}
	int getAttack() {
		return this->attack_point; 
	}
	int getDefense() {
		return this->defense_point; 
	}
	int get_health() { return health; }
};

int main() {
	Character my_char;
	Character enemy_char;

	Character* select_char = new Character[3]; 
	select_char[0].set("IronMan", 70, 40, 100);
	select_char[1].set("CaptainAmerica", 60, 50, 100);
	select_char[2].set("Thor", 80, 30, 100);
	string name; 

	cout << "Choose your character(IronMan, CaptainAmerica, Thor): ";
	cin >> name; 
	for (int i = 0; i < 3; i++) {
		if (name == select_char[i].getName()) {
			my_char.set(select_char[i].getName(), select_char[i].getAttack(), select_char[i].getDefense(), select_char[i].get_health());
		}
	}
	int enemy_index = rand() % 3; 
	enemy_char.set(select_char[enemy_index].getName(), select_char[enemy_index].getAttack(), select_char[enemy_index].getDefense(), select_char[enemy_index].get_health());

	cout << "--My Character--" << endl; 
	my_char.print_info(); 

	cout << "--Enemy Character--" << endl; 
	enemy_char.print_info(); 

	cout << endl << "--Battle--" << endl;
	cout << "My Life: " << my_char.get_health() << "\t"
		<< "Enemy Life:" << enemy_char.get_health() << endl;

	while (1) { 
		enemy_char.defense(my_char.attack());
		if (enemy_char.get_health() < 0) {
			enemy_char.setHealth(); 
			cout << "My Life: " << my_char.get_health() << "\t"
				<< "Enemy Life:" << enemy_char.get_health() << endl;
			cout << "You Win!" << endl; 
			break; 
		}
		cout << "My Life: " << my_char.get_health() << "\t"
			<< "Enemy Life:" << enemy_char.get_health() << endl;

		my_char.defense(enemy_char.attack());
		if (my_char.get_health() < 0) {
			cout << "Enemy Win!" << endl;
			cout << "My Life: " << my_char.get_health() << "\t"
				<< "Enemy Life:" << enemy_char.get_health() << endl;
			my_char.setHealth();
			break; 
		}
				cout << "My Life: " << my_char.get_health() << "\t"
			<< "Enemy Life:" << enemy_char.get_health() << endl;
	}

	return 0;
}
